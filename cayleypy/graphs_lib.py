# TODO: adds Rubik's cubes etc.; support specifying initial state.


def prepare_graph(name, n=0) -> tuple[list[list[int]], list[int]]:
    """Returns pre-defined Cayley or Schreier coset graph (defined by generators and destination state).

    Supported graphs:
      * "lrx" - Cayley graph for S_n (n>=2), generated by: shift left, shift right, swap first two elements.
      * "top_spin" - Cayley graph for S_n (n>=4), generated by: shift left, shift right, reverse first four elements.
      * TODO: Add Rubik's cubes and other interesting graphs.

    :param name: name of pre-defined graph.
    :param n: parameter (if applicable).
    :return: list of generators and the destination state.
    """
    if name == "lrx":
        assert n >= 2
        generators = [list(range(1, n)) + [0], [n - 1] + list(range(0, n - 1)), [1, 0] + list(range(2, n))]
        return generators, list(range(n))
    elif name == "top_spin":
        assert n >= 4
        generators = [list(range(1, n)) + [0], [n - 1] + list(range(0, n - 1)), [3, 2, 1, 0] + list(range(4, n))]
        return generators, list(range(n))
    else:
        raise ValueError(f"Unknown generator set: {name}")
