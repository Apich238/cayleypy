"""Library of pre-defined graphs."""

from cayleypy.permutation_utils import compose_permutations

CUBE222_ALLOWED_MOVES = {
    'f0': [0, 1, 19, 17, 6, 4, 7, 5, 2, 9, 3, 11, 12, 13, 14, 15, 16, 20, 18, 21, 10, 8, 22, 23],
    '-f0': [0, 1, 8, 10, 5, 7, 4, 6, 21, 9, 20, 11, 12, 13, 14, 15, 16, 3, 18, 2, 17, 19, 22, 23],
    'r1': [0, 5, 2, 7, 4, 21, 6, 23, 10, 8, 11, 9, 3, 13, 1, 15, 16, 17, 18, 19, 20, 14, 22, 12],
    '-r1': [0, 14, 2, 12, 4, 1, 6, 3, 9, 11, 8, 10, 23, 13, 21, 15, 16, 17, 18, 19, 20, 5, 22, 7],
    'd0': [0, 1, 2, 3, 4, 5, 18, 19, 8, 9, 6, 7, 12, 13, 10, 11, 16, 17, 14, 15, 22, 20, 23, 21],
    '-d0': [0, 1, 2, 3, 4, 5, 10, 11, 8, 9, 14, 15, 12, 13, 18, 19, 16, 17, 6, 7, 21, 23, 20, 22]
}


def prepare_graph(name, n=0) -> tuple[list[list[int]], list[int]]:
    """Returns pre-defined Cayley or Schreier coset graph (defined by generators and destination state).

    Supported graphs:
      * "lrx" - Cayley graph for S_n (n>=2), generated by: shift left, shift right, swap first two elements.
      * "top_spin" - Cayley graph for S_n (n>=4), generated by: shift left, shift right, reverse first four elements.
      * "cube_2/2/2_6gensQTM" - Schreier coset graph for 2x2x2 Rubik's cube with fixed back left upper corner and only
          quarter-turns allowed. There are 6 generators (front, right, down face - clockwise and counterclockwise).
      * "cube_2/2/2_9gensHTM" - same as above, but using half turn metrics (i.e. it has 9 generators).

    :param name: name of pre-defined graph.
    :param n: parameter (if applicable).
    :return: list of generators and the destination state.
    """
    if name == "lrx":
        assert n >= 2
        generators = [list(range(1, n)) + [0], [n - 1] + list(range(0, n - 1)), [1, 0] + list(range(2, n))]
        return generators, list(range(n))
    elif name == "top_spin":
        assert n >= 4
        generators = [list(range(1, n)) + [0], [n - 1] + list(range(0, n - 1)), [3, 2, 1, 0] + list(range(4, n))]
        return generators, list(range(n))
    elif name == "cube_2/2/2_6gensQTM":
        initial_state = [color for color in range(6) for _ in range(4)]
        return list(CUBE222_ALLOWED_MOVES.values()), initial_state
    elif name == "cube_2/2/2_9gensHTM":
        generators = list(CUBE222_ALLOWED_MOVES.values())
        for move_id in ['f0', 'r1', 'd0']:
            generators.append(compose_permutations(CUBE222_ALLOWED_MOVES[move_id],CUBE222_ALLOWED_MOVES[move_id]))
        initial_state = [color for color in range(6) for _ in range(4)]
        return list(generators), initial_state
    else:
        raise ValueError(f"Unknown generator set: {name}")
